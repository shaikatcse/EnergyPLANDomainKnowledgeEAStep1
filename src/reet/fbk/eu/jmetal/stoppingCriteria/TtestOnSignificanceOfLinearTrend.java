package reet.fbk.eu.jmetal.stoppingCriteria;

import java.util.Random;

import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;
import org.apache.commons.math3.stat.descriptive.moment.Mean;
import org.apache.commons.math3.stat.descriptive.moment.StandardDeviation;
import org.apache.commons.math3.distribution.TDistribution;
import org.apache.commons.math3.linear.*;

public class TtestOnSignificanceOfLinearTrend {

	/*double diversity[]= new double [10];
	double []realDiversity={0.2926120744525417, 0.27150260204969695, 0.2547204063451842, 0.24074444187259728, 0.2240398533112203, 0.20818623450091325, 0.1941730693860317, 0.18470237149623267, 0.1692891252221612, 0.15807275757603326, 0.14766598489529956, 0.1429044356327754, 0.1378109694112776, 0.1307290274598886, 0.13008015263188386, 0.12980853935883765, 0.12906824013098148, 0.1229230663700524, 0.11854940804464702, 0.11228046739874485, 0.108353508671995, 0.10184218844533503, 0.09345753004070012, 0.08992611140451971, 0.08533803032166903, 0.0825380664913281, 0.07944222796483606, 0.07811091927095797, 0.07577060167894217, 0.07663494259207428, 0.0747326109970957, 0.07134996170469991, 0.06823885094154783, 0.06585213989303422, 0.06298945233941176, 0.061499501034233905, 0.05966459262472271, 0.05907430926516741, 0.05881761846674813, 0.05543256007031681, 0.0507593663196677, 0.04591416010342365, 0.041823209748204, 0.04020393021541263, 0.039409493430398644, 0.039713682283859554, 0.04080786892830352, 0.0406293765123981, 0.039222900659368454, 0.03982227025410332, 0.03829885387172333, 0.03590085585867314, 0.035720743624874686, 0.034747754911840775, 0.03492880927599817, 0.03457480878821451, 0.031393651140202615, 0.028874783696352258, 0.025715404231097933, 0.025019736204798217, 0.02453211244166024, 0.024789513387748128, 0.0242925582028105, 0.02341142158888947, 0.023058638665999217, 0.022713894965781845, 0.02255591671247484, 0.022125995153956732, 0.021739858033991675, 0.02168834130425276, 0.021403914156423565, 0.020886134531951067, 0.020634928695555502, 0.020238282011933895, 0.020076883871223448, 0.01985907628612561, 0.019498901888145265, 0.019269950270427414, 0.018653493163895158, 0.017955685874342583, 0.01732648649677293, 0.016988717507394214, 0.016865608577132377, 0.016734810938269597, 0.016572110843240645, 0.016666578532867234, 0.016599426159845023, 0.01650057205094037, 0.015894130486273066, 0.015653878416926083, 0.015304025529999876, 0.015268383831454445, 0.014903524235754424, 0.014642248888350454, 0.01443714130531872, 0.014395284017343942, 0.01455086879223661, 0.014457286995209371, 0.014275116555515445, 0.014164398803308482, 0.014528724244937672, 0.014260922725970073, 0.01419425310416518, 0.013975085582247413, 0.013493924360376967, 0.013551452233294474, 0.01339689928635835, 0.013476098894206682, 0.013589420889047047, 0.013624149959082127, 0.013895352771414468, 0.013946378751654498, 0.013938749043242936, 0.01391220412645971, 0.013763644558989476, 0.013357849206157901, 0.013202819312448997, 0.012877120179172764, 0.012509798678637019, 0.01240416357192732, 0.01188014064218018, 0.011834737931764027, 0.011910573422754511, 0.011379944544891406, 0.011436445032538567, 0.011429058908538783, 0.011348036455286573, 0.010929494453474672, 0.010600219129416777, 0.010408017528209077, 0.01025413230943468, 0.009983805140853777, 0.009675559959055823, 0.009660229888205371, 0.009673758128844153, 0.009791057200519758, 0.009485363812505683, 0.00934101393404133, 0.00923103864769806, 0.009424001574672899, 0.00943974698293351, 0.009381175522436103, 0.009354648188770772, 0.009539008714119206, 0.00977397687300608, 0.010126588105624295, 0.009943260378365609, 0.010126392737493913, 0.010169516815498858, 0.010335561114751998, 0.010200952282825209, 0.010322731842706595, 0.010206873867542819, 0.010213317239601049, 0.01045335812071925, 0.010670625115887749, 0.01090558297460052, 0.010827033430539678, 0.010686856294521298, 0.01045100056602139, 0.010729525689535812, 0.01021570723793789, 0.0102061354810078, 0.00992438360541697, 0.009712801786490819, 0.009548084823344002, 0.009705240446486478, 0.009700899899740767, 0.009475970354881675, 0.009632657168995843, 0.009498498824370968, 0.009357834035000638, 0.009351378370618038, 0.009258287844111299, 0.009415973985519398, 0.009601720326864195, 0.009495040026302344, 0.009387006433134266, 0.009609751013985049, 0.00964824550605412, 0.009834273733141458, 0.00992251396191615, 0.009817683019402682, 0.009827877263306712, 0.00986230405298201, 0.009974071121231122, 0.00993950788357822, 0.009768870695431123, 0.009800970991048466, 0.009882463196319509, 0.009934700831547558, 0.009828804425246208, 0.009929497007505584, 0.010034798656865426, 0.010156603401791094, 0.010249912746091645, 0.010275564586986643, 0.010278601316116312, 0.010355941099893004, 0.010367607158436905, 0.010306552436833592, 0.010216626319443709, 0.010302684082547154, 0.010370886004510938, 0.010408587157837344, 0.010257182996395336, 0.010281712125173764, 0.010220270774316358, 0.01021765650322696, 0.01004624876667236, 0.010183944954710753, 0.01020680039611628, 0.010208752227460484, 0.010156100765405516, 0.010238126375189326, 0.010390692080810287, 0.010368493660076576, 0.010289251720064818, 0.010335931010819558, 0.01037124672876518, 0.01032651651319918, 0.010331150820451445, 0.010332053074902947, 0.010204778376309056, 0.010252893662070982, 0.01025479584367052, 0.010173339891175623, 0.010208446559034684, 0.010466311415314325, 0.010423118318690363, 0.010177200821295513, 0.010133835232637499, 0.010243950835173243, 0.010530794436265525, 0.010193034002291644, 0.010242950353095236, 0.010279597756797909, 0.010341751223926826, 0.01038663131243039, 0.010241658706588443, 0.010239247777771009, 0.010110140410832762, 0.010182937891522774, 0.010217599236435702, 0.01022451875883907, 0.010276261291100193, 0.010318596475137895, 0.010325161851479915, 0.01015827473464142, 0.010076240302423775, 0.010257696552487976, 0.010232578996470613, 0.010332231624064414, 0.01032491026725915, 0.010386910407462422, 0.010531576842650913, 0.010478005571600202, 0.010330422932956362, 0.010482288389988702, 0.010421362683710496, 0.010408746097071158, 0.010254101474183546, 0.01043415074732463, 0.010460513162017826, 0.010315985380198942, 0.010247699267974194, 0.010323792222034294, 0.010246315868439443, 0.010227408614512918, 0.010185439210557855, 0.01019367182555682, 0.010328931263448056, 0.010412590251492966, 0.01044906439689007, 0.010420405891863408, 0.010435466050749187, 0.0103692127839903, 0.010367273568307954, 0.010203381943324789, 0.010265039578172703, 0.010382881416965835, 0.010339673949628229, 0.010340154677262979, 0.01030368445896127, 0.010345680161839363, 0.010464523814141468, 0.010493496107747998, 0.010574363611294, 0.01055854071667023, 0.010389475415428917, 0.010499150103764175, 0.010315389631361324, 0.0102790981930711, 0.010374121691577318, 0.010174535702701985, 0.010194532141498012, 0.010103242808415507, 0.010184223815055468, 0.010234714336173244, 0.01042607655550148};*/
	
	
	
	public TtestOnSignificanceOfLinearTrend() {
		// TODO Auto-generated constructor stub
	/*	diversity[0]=realDiversity[0];
		for(int i=1;i<300;i++){
			diversity[i]=realDiversity[i]-realDiversity[i-1];
		}
		for(int i=0;i<300;i++){
			System.out.println(i+" "+diversity[i]);
		}
	*/	
		/*double lb = findMin(realDiversity);
		double ub = findMax(realDiversity);
		
		for(int i=0;i<300;i++){
			realDiversity[i]=1+(realDiversity[i]-lb)/(ub-lb);
		}*/
	}
	public double findMax(double[] array) {

	    // TODO: Take appropriate action if the array is empty.

	    double max_value = Double.NEGATIVE_INFINITY;

	    for ( double value : array ) {
	        if ( value > max_value ) {
	            max_value = value;
	        }
	    }

	    return max_value;
	}
	
	public double findMin(double[] array) {

	    // TODO: Take appropriate action if the array is empty.

	    double min_value = Double.POSITIVE_INFINITY;

	    for ( double value : array ) {
	        if ( value < min_value ) {
	        	min_value = value;
	        }
	    }

	    return min_value;
	}

	
public static double doSignificanceTest(double []array){
		
		Mean mean = new Mean();
		StandardDeviation sd = new StandardDeviation(true/*means sample standardDeviation*/);
		
		double x[] = new double[array.length];
		for(int i=0;i<array.length;i++){
			x[i]=i+1;
		}
				
		double [] normlizedArray = new double[array.length];
		int degreesOfFreedom = array.length - 1;
		double statsMean=mean.evaluate(array);
		double statSD=sd.evaluate(array);
		double xMean = mean.evaluate(x);
		double xStd = sd.evaluate(x);
		for(int i=0;i<array.length;i++){
			normlizedArray[i]= (array[i]- statsMean)/statSD;
			x[i]=(x[i]-xMean)/xStd;
		}
	
		RealMatrix  PIStar = MatrixUtils.createRowRealMatrix(normlizedArray) ;
		RealMatrix X = MatrixUtils.createRowRealMatrix(x);
		RealMatrix XInv =(new LUDecomposition(X.multiply(X.transpose()))).getSolver().getInverse();
		RealMatrix betaHat = XInv.multiply(X.multiply(PIStar.transpose()));
		RealMatrix eta = PIStar.subtract(betaHat.multiply(X));
		RealMatrix S2 = (eta.multiply(eta.transpose())).scalarMultiply(1.0/degreesOfFreedom);
		S2 = S2.multiply(XInv);
		double t = betaHat.getEntry(0, 0) / Math.sqrt(S2.getEntry(0, 0));
		
		TDistribution td = new TDistribution(degreesOfFreedom);
		double cdf=td.cumulativeProbability(t);
		double pValue =2*Math.min(cdf, 1-cdf);
		return pValue;
}

	void doSignificanceTest(){
		
		for(int j=10;j<300;j++){
	
		Mean mean = new Mean();
	
		
		StandardDeviation sd = new StandardDeviation(true/*means sample standardDeviation*/);
		
		double x[] = new double[10];
		/*Random rm = new Random();
		for(int i=0;i<300;i++){
			x[i]=i;
			diversity [i]= rm.nextDouble(); 
		}*/
		
		for(int i=0;i<10;i++){
			diversity[i]=realDiversity[j]-realDiversity[j+i-10];
		}
			
		double [] normlizedDiversity = new double[10];
		int degreesOfFreedom = 10 - 1;
		double statsMean=mean.evaluate(diversity);
		double statSD=sd.evaluate(diversity);
		for(int i=0;i<10;i++){
			x[i]=i+1;
		}
		double xMean = mean.evaluate(x);
		double xStd = sd.evaluate(x);
		for(int i=0;i<10;i++){
			normlizedDiversity[i]= (diversity[i]- statsMean)/statSD;
			x[i]=(x[i]-xMean)/xStd;
		}
	
	/*	for (int i = 0; i < normlizedDiversity.length / 2; i++) {
			  double temp = normlizedDiversity[i];
			  normlizedDiversity[i] = normlizedDiversity[normlizedDiversity.length - 1 - i];
			  normlizedDiversity[normlizedDiversity.length - 1 - i] = temp;
			}*/
		
		RealMatrix  PIStar = MatrixUtils.createRowRealMatrix(normlizedDiversity) ;
		RealMatrix X = MatrixUtils.createRowRealMatrix(x);
		RealMatrix XInv =(new LUDecomposition(X.multiply(X.transpose()))).getSolver().getInverse();
		RealMatrix betaHat = XInv.multiply(X.multiply(PIStar.transpose()));
		RealMatrix eta = PIStar.subtract(betaHat.multiply(X));
		RealMatrix S2 = (eta.multiply(eta.transpose())).scalarMultiply(1.0/degreesOfFreedom);
	//	double dd=1/degreeOfFredom; 
		//RealMatrix tm =S2.scalarMultiply(1/degreeOfFredom);

		S2 = S2.multiply(XInv);
		double t = betaHat.getEntry(0, 0) / Math.sqrt(S2.getEntry(0, 0));
		
		TDistribution td = new TDistribution(degreesOfFreedom);
		//System.out.println(td.getDegreesOfFreedom());
		double ttt=td.cumulativeProbability(t);
		double pValue =2*Math.min(ttt, 1-ttt);
		System.out.println(j+" "+pValue+" "+betaHat.getEntry(0, 0));
		}
		
		
	}
	
	public static void main(String args[]){
		TtestOnSignificanceOfLinearTrend tTest= new TtestOnSignificanceOfLinearTrend();
		tTest.doSignificanceTest();
		
	}
	
	
}
