FUN_cmoead and VAR_cmoead are FUN and VAR files generated by cMOEAD (a constrained version of moead).

parameters:
algorithm.setInputParameter("T", 20) ;
algorithm.setInputParameter("delta", 0.9) ;
algorithm.setInputParameter("nr", 2) ;

Crossover parameters:
Crossover: DifferentialEvolutionCrossover
parameters = new HashMap() ;
parameters.put("CR", 1.0) ;
parameters.put("F", 0.5) ;

Mutation parameter:
mutation: GeneralModifiedPolynomialMutationForEnergySystems
Boolean favorGenesforRE[] ={true, false, null, true, true, true };
Boolean favorGenesforConventionalPP[] ={false, null, true, null, false, false};
Boolean favorGenesforLFC[]={false, null, null, null, true, true};
Boolean favorGenesforESD[] ={true, false, false, true, null, true};
	
parameters.put("favorGenesforRE", favorGenesforRE);
parameters.put("favorGenesForConventioanlPP", favorGenesforConventionalPP);
parameters.put("favorGenesForLFC",favorGenesforLFC );
parameters.put("favorGenesForESD",favorGenesforESD );

FUN_spea2:i and VAR_spea2:i are FUN and VAR files generated by spea2.
algorithm.setInputParameter("populationSize", 200);
algorithm.setInputParameter("maxEvaluations", 15000);
// for spea2
 algorithm.setInputParameter("archiveSize",200);

// Mutation and Crossover for Real codification
parameters = new HashMap();
parameters.put("probability", 0.9);
parameters.put("distributionIndex", 10.0);
crossover = CrossoverFactory.getCrossoverOperator("SBXCrossover",parameters);

parameters = new HashMap();
parameters.put("probability", 1.0 / problem.getNumberOfVariables());
parameters.put("distributionIndex", 10.0);
parameters.put("maximum generation", (int) algorithm.getInputParameter("maxEvaluations")/(int) algorithm.getInputParameter("populationSize")-1);
			
// decision variables
// index - 0 -> PV Capacity
// index - 1 -> oil boiler heat percentage
// index - 2 -> Ngas boiler heat percentage
// index - 3 -> Biomass boiler heat percentage
// index - 4 -> Ngas micro chp heat percentage
// index - 5 -> electrc car percentage  
			
Boolean favorGenesforRE[] ={true, false, null, true, true, true };
Boolean favorGenesforConventionalPP[] ={false, null, true, null, false, false };
Boolean favorGenesforLFC[]={false, null, null, null, true, true};
Boolean favorGenesforESD[] ={true, false, false, true, null, true};
			
parameters.put("favorGenesforRE", favorGenesforRE);
parameters.put("favorGenesForConventioanlPP", favorGenesforConventionalPP);
parameters.put("favorGenesForLFC",favorGenesforLFC );
parameters.put("favorGenesForESD",favorGenesforESD );
							
mutation = MutationFactory.getMutationOperator(
					"GeneralModifiedPolynomialMutationForEnergySystems", parameters);
			
